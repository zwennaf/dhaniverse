type WalletType = variant {
  MetaMask;
  Phantom;
  Coinbase;
  WalletConnect;
  Injected;
};

type WalletConnection = record {
  address: text;
  chain_id: text;
  wallet_type: WalletType;
  balance: opt text;
};

type WalletInfo = record {
  name: text;
  wallet_type: WalletType;
  icon: text;
  installed: bool;
  download_url: opt text;
};

type DualBalance = record {
  rupees_balance: float64;
  token_balance: float64;
  last_updated: nat64;
};

type StakingStatus = variant {
  Active;
  Matured;
  Claimed;
};

type StakingPool = record {
  id: text;
  staked_amount: float64;
  apy: float64;
  start_date: nat64;
  maturity_date: nat64;
  current_rewards: float64;
  status: StakingStatus;
};

type ExchangeResult = record {
  success: bool;
  from_amount: float64;
  to_amount: float64;
  rate: float64;
  transaction: opt Web3Transaction;
  error: opt text;
};

type AchievementCategory = variant {
  Trading;
  Saving;
  Staking;
  Learning;
};

type AchievementRarity = variant {
  Common;
  Rare;
  Epic;
  Legendary;
};

type AchievementReward = record {
  reward_type: text;
  amount: float64;
};

type Achievement = record {
  id: text;
  title: text;
  description: text;
  category: AchievementCategory;
  rarity: AchievementRarity;
  unlocked: bool;
  unlocked_at: opt nat64;
  reward: opt AchievementReward;
};

type TransactionType = variant {
  Deposit;
  Withdraw;
  Exchange;
  Stake;
};

type TransactionStatus = variant {
  Pending;
  Confirmed;
  Failed;
};

type Web3Transaction = record {
  id: text;
  from: text;
  to: opt text;
  amount: float64;
  transaction_type: TransactionType;
  timestamp: nat64;
  status: TransactionStatus;
  hash: opt text;
};

type Web3Session = record {
  wallet_address: text;
  wallet_type: WalletType;
  chain_id: text;
  connected_at: nat64;
  last_activity: nat64;
};

type User = record {
  id: text;
  email: opt text;
  game_username: text;
  wallet_address: opt text;
  auth_method: text;
  created_at: nat64;
  updated_at: nat64;
};

type AuthResult = record {
  success: bool;
  user: opt User;
  token: opt text;
  is_new_user: opt bool;
  error: opt text;
};

type Result = variant {
  Ok: AuthResult;
  Err: text;
};

type Result_1 = variant {
  Ok: Web3Session;
  Err: text;
};

type Result_2 = variant {
  Ok;
  Err: text;
};

type Result_3 = variant {
  Ok: WalletConnection;
  Err: text;
};

type Result_4 = variant {
  Ok: DualBalance;
  Err: text;
};

type Result_5 = variant {
  Ok: ExchangeResult;
  Err: text;
};

type Result_6 = variant {
  Ok: StakingPool;
  Err: text;
};

type Result_7 = variant {
  Ok: float64;
  Err: text;
};

type Result_8 = variant {
  Ok: AchievementReward;
  Err: text;
};

type Result_9 = variant {
  Ok: Web3Transaction;
  Err: text;
};

service : {
  // Authentication Methods
  authenticate_with_signature: (text, text) -> (Result);
  create_session: (WalletConnection) -> (Result_1);
  clear_session: (text) -> (Result_2);
  get_session: (text) -> (opt Web3Session) query;

  // Wallet Management Methods
  get_available_wallets: () -> (vec WalletInfo) query;
  connect_wallet: (WalletType, text, text) -> (Result_3);
  disconnect_wallet: (text) -> (Result_2);
  get_wallet_status: (text) -> (opt WalletConnection) query;

  // Banking Methods
  get_dual_balance: (text) -> (Result_4) query;
  exchange_currency: (text, text, text, float64) -> (Result_5);
  stake_tokens: (text, float64, nat32) -> (Result_6);
  get_staking_info: (text) -> (vec StakingPool) query;
  claim_staking_rewards: (text, text) -> (Result_7);
  get_achievements: (text) -> (vec Achievement) query;
  claim_achievement_reward: (text, text) -> (Result_8);

  // DeFi Simulation Methods
  simulate_liquidity_pool: (text, float64) -> (Result_7);
  simulate_yield_farming: (text, float64) -> (Result_7);

  // Transaction Methods
  create_transaction: (text, TransactionType, float64, opt text) -> (Result_9);
  get_transaction_history: (text) -> (vec Web3Transaction) query;

  // Health check
  health_check: () -> (text) query;
}